!===============================
module module_sf_ucm


use module_params, only :      &
         history_interval,     &
         g,                    &  ! gravity
         lv,                   &  ! latent heat
         ganma,                &  !
         lapse_rate,           &  !
         omega,                &
         sigma,                &
         cp,                   &
         rd,                   &
         tb,                   &
         pb,                   &
         dt,                   &
         kms,                  &
         kme,                  &
         ncid

use module_vars, only:    &
         kce,               &
         istep,             &
         hl, wl, rl,        &    ! Canopy geometry (height, width, road)
         z,                 &    ! vertical grid height
         dz,                &    ! grid distance
         z_t,               &    ! temperature grid
         dz_t,              &    ! temperature grid distance
         svf_r,             &    ! sky-view factor of roof
         svf_g,             &    ! sky-view factor of ground
         svf_w,             &    ! sky-view factor of wall
         vf_gw,             &    ! view factor of ground to wall
         vf_wg,             &    ! view factor of wall to ground
         vf_wwp,            &    ! view factor of wall to parallel wall
         vf_wwv,            &    ! view factor of wall to ortho wall
         !READ URBANPARAMS.TBL
         ZR,                &    ! building height
         ROOF_WIDTH,        &    ! roof width
         ROAD_WITH,         &    ! road width
         AH,                &    ! anthropogenic heat flux
         FRC_URB,           &    ! fraction of urban area
         CAPR,              &    ! heat capacity of roof
         CAPB,              &    ! heat capacity of buiding (walls)
         CAPG,              &    ! heat capacity of ground
         AKSR,              &    !
         AKSB,              &    !
         AKSG,              &    ! of ground
         ALBR,              &    ! albedo of roof
         ALBB,              &    !        of building (walls)
         ALBG,              &    !        of ground
         Z0B,               &    ! roughness length of walls
         Z0G,               &    !                  of ground
         Z0R,               &    !                  of roof
         TRLEND,            &    !
         TBLEND,            &    !
         TGLEND,            &    !
         DDZR,              &    !
         DDZB,              &    !
         DDZG,              &    !
         THERMAL_INSOL_ROOF,                &  !
         THERMAL_INSOL_WALL,                &  !
         RLNU,                              &  !
         BLNU,                              &  !
         GLNU,                              &  !
         BOUNDR,                            &  !
         BOUNDB,                            &  !
         BOUNDG,                            &  !
         AHOPTION,                          &  !
         FRCURBOPT,                         &  !
         AHDIUPRF,                          &  !
         ! radiation-solar
         COSZ, OMG, DECLIN,                 &
         MOLR, MOLB, MOLG, MOLC

use module_io
use module_phys_funcs
implicit none
real(8)  :: X1, X2, X3
real(8), parameter :: THERINSUL_LAMDA  = 0.03D0
real(8), parameter :: THERINSUL_CAP    = 0.02D6
real(8), dimension(1:6)     ::    SWNET_UCM, LWNET_UCM, LWDOWN_UCM, LWUP_UCM

!============
  contains


!=================================================================
subroutine ucm_swave_wall(                               &
                            elevation, alpha_s, alpha_c, & !- in
                            sd,                          & !- in
                            sdr                          & !- out
                            )
!=================================================================
! to calculate direct short wave radiation in particular direction
!    sd is short wave radiation on horizontal plane
!    sde, sdw, sds, sdn is for east, west, south, north direction.
!..................................................................
implicit none
real(8), intent(in)    :: elevation, alpha_s, alpha_c
real(8), intent(inout)    :: sd
real(8), dimension(4), intent(out)  :: sdr
real(8)                :: x, y, time, sdtop, X1
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if(elevation <= 0.d0)  then
   sdr(:) = 0.d0
   sd     = 0.d0
else
   y   =  dtan(elevation)   ; if ( y < 0.01d0 ) y = 0.01d0
   x   =  1.0d0 / y
   sdr(1) = -sd * x * alpha_s
   sdr(2) =  sd * x * alpha_s
   sdr(3) = -sd * x * alpha_c
   sdr(4) =  sd * x * alpha_c
end if
   where(sdr<0.d0)  sdr=0.d0
return
end subroutine ucm_swave_wall
!==================================================================







!======================================================
subroutine ucm_roof (                   &
                      sw, lw,           & !- in
                      u, v, p, t,       & !- in
                      TS, tw_r,         & !- inout
                      qv,               & !- inout
                      qa, q, qev,       & !- OUT
                      RNET, H, LE, GR   & !- OUT
                     )
implicit none
real(8), dimension(kms:kme), intent(in)  :: u, v, t, p, qv
real(8), dimension(kms:kme), intent(in)       :: qa
real(8), intent(in)                           :: sw, lw
real(8), intent(inout)                        :: TS
real(8), dimension(RLNU), intent(inout)       :: tw_r
real(8), dimension(kms:kme), intent(inout)    :: q, qev
real(8), intent(out)                    :: H, RNET, GR, LE

!- local variable
integer                        :: k_ref, K
real(8)                        :: gan_t, tc
real(8)                        :: albedo, bo
real(8)                        :: z0, rho, PA
real(8)                        :: UA, sq_u
real(8), dimension(RLNU)       :: kw, dx
real(8), parameter             :: eps = 0.9d0
real(8)                        :: ch, cd, rib, z_ref, ZA
real(8)                        :: rdown, ta, tg, qva
real(8)                        :: hc, gc, lec
real(8)                        :: beta
real(8)                        :: b1
!................................................................
! sensible heat is the product of heat-transfer coefficient and
! the difference between surface temp and reference air temp
! ALBR : albedo of roof surface
! bo: bowen ratio
! Z0R: rough length of roof
if(ISTEP==1) write(*,'(A,F7.1)') 'ROOF THICKNESS', DDZR

dx(:)    =  DDZR/DFLOAT(RLNU-1)
albedo   =  ALBR
bo       =  5.d0
z0       =  Z0R
kw(:)    =  AKSR / CAPR
GC       =  AKSR / dx(1)

! set insolation for roof
if(THERMAL_INSOL_ROOF==1) THEN
   if(ISTEP==1) WRITE(20,*) "-----INSULATION ROOF"
   do k=1,5
      kw(k) = THERINSUL_LAMDA / THERINSUL_CAP
   end do
      GC    = THERINSUL_LAMDA / DX(1)
end if

gan_t    = lapse_rate + ganma   ![K/m]
k_ref    = kce
TC       = TB - 273.15d0

PA     =  P(k_ref)     ![hPa]
Z_REF  =  Z_T(k_ref)   !- height of referent point
TA     =  T(k_ref) + Z_REF * gan_t

! Air density (rho) = air pressure (Pa) / rd / temp (Kelvin)
RHO    =  PA * 100.d0 / RD / (TA + TB )   !- air density
sq_u   = u(k_ref-1)**2 + v(k_ref-1)**2
if(sq_u.lt.1.d-5) sq_u = 1.d-5
UA     = dsqrt( sq_u )

ZA     =  dz(k_ref)/2.0d0     !- length from surface to referent point
RIB    = (g/tb)*( TA - TS )* ZA / sq_u
!call louis79_scheme ( rib, ZA, z0, ch, cd  )
B1 = DLOG(Z0/(Z0*0.1D0))/0.4
CALL mos( B1, ZA, Z0, UA, TA, TS,  &           !-in
          RIB, CD, CH, MOLR )                  !-inout

HC     =  RHO * CP * CH * UA

!>>>> - newton method
RDOWN  =  SW * ( 1.0d0 - ALBEDO ) + eps * lw
TG     =  TW_R(2)
QVA    =  QV (k_ref)

call sf_temp_newton_bowen_ad    (                        &
                                rdown, eps, ta, tg,      & ! in
                                hc, gc, bo, tb,          & ! in
                                ts, rnet, h, le, gr      & ! inout
                                )

!>>>> step 5: calculate inside wall temperature
! set boundary condition

tw_r(1)  = ts
if( BOUNDR == 1 ) then
   tw_r(RLNU) = tw_r(RLNU-1)
else
   tw_r(RLNU) = TRLEND  - tc
end if

call heat_1d_ucm( RLNU, dx, kw, tw_r)
!>>>> step four : calculate heat released by roof surface
! calculate sensible heat from roof of urban canopy
! h: W/m2 ; rho: kg/m3 ; cp: J/kgK
! q: K/s
Q(k_ref) =  ((h+qa(kce)) /(rho*cp) )*( wl**2 / &
                (dz(k_ref)*(wl+rl)**2) )         ![ K/s ]
! specific humidity
! [J/kg x kg/m3 x kg/kg x m/s] = [W/m2]
qev(k_ref) = ((  wl/(wl+rl)  )**2) *le / (rho*Lv)/dz(k_ref)
SWNET_UCM(1)   = SW * ( 1.0d0 - ALBEDO )
LWDOWN_UCM(1)  = EPS * LW
LWUP_UCM(1)    = EPS * SIGMA*(TS+TB)**4
LWNET_UCM(1)   = LWDOWN_UCM(1) - LWUP_UCM(1)
return
end subroutine ucm_roof
!===================================================================








!==================================================================
subroutine ucm_ground  (                                   &
                            u, v, p,                       & !- in
                            sw, lw, sd, ss, sdr,           & !- in
                            ratio_g, ratio,                & !- in
                            svf_g, vf_gw, hour,            & !- in
                            ts, t, TS_G, tw_g,             & !- inout
                            qv,                            & !- inout
                            tau_u, tau_v, tau_t, tau_qv,   & !- out
                            H, RNET, GR, LE                & !- OUT
                          )
implicit none
real(8), dimension(kms:kme), intent(in)    :: u, v, p
real(8), intent(in)                        :: sw, lw, sd, ss
real(8), dimension(4), intent(in)          :: sdr ! short wave
real(8), intent(in)        :: ratio_g, svf_g
real(8), dimension(4, kce-2), intent(in) :: ratio     !  sunlit wall,
real(8), dimension(1:kce-2), intent(in)  :: vf_gw  ! VF ground to wall
integer, intent(in)                      :: hour
real(8), dimension(4, kce-2), intent(in) :: ts
real(8), dimension(kms:kme), intent(inout)   :: t, qv
real(8), dimension(GLNU), intent(inout)      :: tw_g
real(8), intent(inout)                       :: TS_G
real(8), intent(out)           :: tau_u, tau_v, tau_t, tau_qv
real(8), intent(out)           :: H, RNET, GR, LE
!- local variables
integer                        :: id, k
real(8)                        :: PA, rho, beta
real(8)                        :: u1, v1, sq_u, UA, ZA
real(8)                        :: albedo, bo, z0, tc, gan_t
real(8)                        :: rib
real(8)                        :: SDOWN, ldown  !, vfgw
real(8)                        :: lwall, swall, rdown
real(8)                        :: ch, cd
integer                        :: k_ref
real(8)                        :: hc, gc, lec
real(8)                        :: ta, tg, qva
real(8), dimension(GLNU)       :: kw, dx           ! road diffusivity
real(8)                        :: b1, AHH
real(8), parameter             :: eps = 0.9d0
!--------------------------------------------------------------------

if(istep==1)  print*, "Anthropogenic heat flux: ", AH

AHH = AH*AHDIUPRF(HOUR+1)

k_ref   = kms + 1
if(istep==1)  write(*,'(A,F7.1)') 'GROUND THICKNESS', DDZG

dx(:)       =  DDZG/DFLOAT(GLNU-1)
gan_t       =  lapse_rate + ganma         ! [K/m]
pa          =  P(k_ref)                      ! [hPa]
tc          =  TB - 273.15d0      ! base temperature in C degree
albedo      =  ALBG
bo          =  3.d0
z0          =  Z0G
ta          =  T(k_ref)
za          =  Z_T(k_ref)

RHO         = PA * 100.d0/ RD/ (TA + TB +  ZA * GAN_T)
!- ground heat: kw is heat diffusivity
!= the product of thermal conductivity and capacity
KW(:)       =  AKSG / CAPG

!- calculate square velocity
U1    =  U(k_ref)
V1 = V(k_ref)
SQ_U  =  U1**2 + V1**2
if(SQ_U.lt.1.d-5) SQ_U = 1.d-5
UA    =  DSQRT( SQ_U )

!- Exchange coefficient
RIB   =  (g/tb) * ZA * (TA - TS_G) / SQ_U
B1    =  DLOG(Z0/(Z0*0.1D0))/0.4
CALL mos( B1, ZA, Z0, UA, TA, TS_G,  & !-in
              RIB, CD, CH, MOLG )      !-inout

! >>>  : calc. heat budget at road surface
! reflected radiation from walls: loop id for 4 directions wall,
!                                 loop k for canopy layers
swall = 0.0d0
do id = 1, 4
  do k = 1, kce-2
     swall =   swall                                    &
            + ALBB  * VF_GW(k) * SDR(ID) * RATIO(ID, K) &  ! direct
            + ALBB  * VF_GW(k) * SS                ! diffused
  end do
end do

!-total short wave equal sum of direct and diffused radiation on ground &
!                                          reflectd radiation from walls
SDOWN  = ( 1.0d0 - albedo ) * ( RATIO_G * SD  +   SVF_G * SS  +  SWALL )
!-total long wave released from walls to ground
LWALL = 0.0d0
do id = 1, 4
   do k=1, kce-2
      LWALL = LWALL + vf_gw(k) * EPS *  SIGMA  * ( tb + ts(id,k) ) **4
   end do
end do
!IF(4.d0 * sum( vf_gw(:)) +SVF_G .ne. 1.d0 ) then
!  print*, 4.d0 * sum(vf_gw(:))+SVF_G
!  stop 'view factor ground'
!end if
LDOWN  = EPS * ( SVF_G * LW  +  LWALL  )         ! absorbed by ground

hc     =  rho * cp * ch *UA       ! heat transfer coeffient ( W/m2K)
gc     =  AKSG / dx(1)             ! heat transfer coefficient (W/Km2)

! >>>     solve ts by newton method
RDOWN = SDOWN + LDOWN
TG    =  tw_g(2)
QVA   =  QV(k_ref)

call sf_temp_newton_bowen_ad (                        &
                              rdown, eps, ta, tg,      & ! in
                              hc, gc, bo, tb,          & ! in
                              ts_g, rnet, h, le, gr    & ! inout
                              )
! >>>   solve wall temperature by 1D heat equation
!- BC of walls
tw_g(1)    =  TS_G
tw_g(GLNU) =  tw_g(GLNU-1)      !TGLEND  -  tc
call heat_1d_ucm ( GLNU, dx, kw,tw_g)
TAU_U      =     CD * UA  * U1               ! (m2/s2)
TAU_V      =     CD * UA  * V1               ! cm * UA**2 is tau
TAU_T      =   - H / RHO / CP - AHH/RHO/CP
TAU_QV     =   - LE / RHO / LV                  ! [kg/kg x m/s]

SWNET_UCM(2)   = SDOWN
LWDOWN_UCM(2)  = LDOWN
LWUP_UCM(2)    = EPS * SIGMA*(TS_G+TB)**4
LWNET_UCM(2)   = LWDOWN_UCM(1) - LWUP_UCM(1)
return
end subroutine ucm_ground
!====================================================================






!=====================================================================
subroutine mucm_wall (                                      &
                       u, v, t,                            & !- in
                       sw, sd, ss, lw, sdr,                & !- in
                       ratio_g, ratio,                     & !- in
                       ts_g, ts, tw,                       & !- inout
                       qv,                                 & !- inout
                       qa, q, qev,                         & !- out
                       H, RNET, GR, LE                     & !-OUT
                      )
implicit none
!- inout variables
real(8), dimension(kms:kme), intent(in)       :: u, v, t, qv
real(8), intent(in)                           :: sw, sd, ss, lw
real(8), intent(in)                           :: ts_g
real(8), dimension(4), intent(in)             :: sdr

real(8), dimension(4,kce-2), intent(in)           :: ratio
real(8), intent(in)                               :: ratio_g
real(8), dimension(kms:kme), intent(in)           :: qa
real(8), dimension(kms:kme), intent(inout)        :: q, qev
real(8), dimension(4,kce-2), intent(inout)        :: ts
real(8), dimension(4,kce-2,BLNU), intent(inout)   :: tw
real(8), dimension(1:4,1:kce-2), intent(out)      :: H, RNET, GR, LE
!- local variables
real(8), parameter             :: eps = 0.9d0
real(8), dimension(4)          :: tsw, xxx
real(8)                        :: u_cap, v_cap, q_cap
integer                        :: k , i, id, j
real(8)                        :: dzcap
real(8)                        :: gan_t, bo, p, c, albedo

real(8), dimension(4, kce-2)          :: hflux
real(8), dimension(4, kce-2)          :: snet, lnet, ldown, lup
real(8), dimension(4)                 :: sd_tag, sd_p, sd_v1, sd_v2
real(8), dimension(4, kce-2) :: ratio_tag, ratio_p, ratio_v1, ratio_v2
real(8), dimension(4, kce-2)          :: ts_tag, ts_p, ts_v1, ts_v2
real(8), dimension(4, kce-2, BLNU)    :: tw_tag
real(8), dimension(BLNU)              :: tw1d, kw, dx
real(8), dimension(kce-2)             :: z_cap
! - newton method
real(8)                               :: a, d, e, x, gc
! - for check
real(8)                               :: tc, tsg, large_u, hc, rho
real(8)                               :: s1, s2, s3, l1, l2, l3
real(8)                               :: x1, x2, x3, x4, x5

real(8)                               :: rdown, ta, tg, qva , xxx1
real :: xxx2
real(8) :: ahh
!------------------------------------------------------------------
ahh = 0.d0
IF(ISTEP==1) WRITE(*,'(A,F7.1)') 'WALL THICKNESS', DDZB
DX(:)       =  DDZB/DFLOAT(BLNU-1)
gan_t       =  lapse_rate + ganma     ! [K/m]
bo          =  1000.d0                  ! bowen rate [ ]
P           =  PB                     ! pressure [hPa]
ALBEDO      =  ALBB              ! albedo [ ]
! calculate canopy layer height mean point
Z_CAP(1:kce-2)  = Z_T(kms+1:kce-2+1)
TC              = TB - 273.15d00
KW(:)           = AKSB / CAPB
GC              = AKSB / dx(1)

IF(THERMAL_INSOL_WALL==1) THEN
IF(ISTEP==1) WRITE(20,*) '---INSULATION WALLS'
   do K = 1,5
      KW(k) = THERINSUL_LAMDA / THERINSUL_CAP
   end do
      GC    = THERINSUL_LAMDA / DX(1)
END IF

!>>>>  - determine dimension variables  !OKKKK
SD_TAG(:)    = SDR(:)
SD_P(1)      = SDR(2)   ! SD_P is SD from parallel wall
SD_P(2)      = SDR(1)   ! 1 is east, 2 is west, 3 is south,
SD_P(3)      = SDR(4)   ! 4 is north
SD_P(4)      = SDR(3)
!- determine ratio under solar

ratio_tag        = ratio
ratio_p(1, :)    = ratio(2, :)
ratio_p(2, :)    = ratio(1, :)
ratio_p(3, :)    = ratio(4, :)
ratio_p(4, :)    = ratio(2, :)

!- determine  wall surface temp variables ( two dims )
!- then dim 1 is walls derection ; dim 2 is canopy layer nu

ts_tag      =  ts
ts_p(1, :)  =  ts(2, :)
ts_p(2, :)  =  ts(1, :)
ts_p(3, :)  =  ts(4, :)
ts_p(4, :)  =  ts(3, :)
tsg         =  tb + ts_g   ! (in Kelvin) use old ts_ground

!- walls inside temperature
tw_tag(:,:,:)      = tw(:,:,:)
!---------------------------
!- Loop from here
!---------------------------
do id = 1, 4            ! 1-east, 2-west, 3-south, 4-north
   do i = 1, kce-2      ! loop for canopy layer
      !>>>> step 2: calculate short wave radiation        [ W/m2 ]
      ! net short wave = short wave from
      !                  1) road 2) other wall and 3) solar
      ! s1 = reflected radiation: from road and wall (parallel)
      s1 = vf_wg(i)  * ratio_g * sd * ALBG   ! from road

      do k=1, kce-2
         s1  =  s1 + albedo *  (vf_wwp(i,k)+2.d0*vf_wwv(i,k)) * &
             ratio_p(id, k)  * sd_p(id)
      end do

      ! s2 is direct short way from atmosphere (only area exposed to sun)
      s2  =  ratio_tag(id, i) * sd_tag(id)
      ! s3 is diffusive short way from atmosphere
      s3  =  svf_w(i) * ss
      ! snet = ( 1-albedo ) absorb rate x total coming radiation
      snet(id, i) = ( 1.0d0 - albedo ) * ( s1 + s2 + s3 )

      !>>>> step 3: calculate long wave radiation                [ W/m2 ]

      l1 = eps * sigma * vf_wg(i) * tsg**4     ! from road
      do k=1, kce-2
         l1  =  l1 +  eps * sigma *  (vf_wwp(i, k)+2.d0*vf_wwv(i,k)) *   &
                                        ( tb + ts_p (id, k) ) **4
      end do

      l2 =  svf_w(i) * lw

      l3 =  eps * sigma * ( tb  +  ts_tag(id, i) ) ** 4

      ldown(id, i) = l1 + l2
      lup(id, i)   = l3
      lnet(id, i) =  ldown(id, i) - lup(id, i)
      rnet(id, i) = snet(id, i) + lnet(id, i)

      ! calculate sensible heat flux by jurjes formula        [ W/m2 ]

      large_u    = ( u(i+1) **2 + v(i+1) **2 ) ** 0.5d0
      if( large_u <= 5.0d0 ) then
         hc = 6.15d0 + 4.18d0 * large_u
      else
	       hc = 7.51d0 * large_u **0.78d0
      end if

      ! newton method
      a =  - eps * sigma
      d =  - (1.0d0 + 1.0d0/bo ) * hc   -  gc
      e =  snet(id, i) + ldown(id, i) +  gc * ( tw_tag(id,i, 2) + tb ) +  &
                (1.0d0 + 1.0d0/bo ) * hc * ( t(i+1)  + z(i+1) * ganma  +  tb  )

      !  call newton ( a, d, e, x )
      rdown  =  snet(id, i) + ldown(id, i)
      ta     =  t(i+1)  +  z(i+1) * gan_t
      tg     =  tw_tag(id,i, 2)
      qva    =  qv(i)

      call sf_temp_newton_bowen ( rdown, ta, tg, hc, gc, bo, x  )

      call sf_temp_newton_bowen_ad (                     &
                              rdown, eps, ta, tg,        & !-in
                              hc, gc, bo, tb,            & !-in
                              ts_tag(id,i), rnet(id,i),  & !-io
                              h(id,i),le(id,i),gr(id,i)  & ! inout
                              )
      !ts_tag(id, i) = x - tb
      ! inside_wall temperature

      do j=1, BLNU   ; tw1d(j)  = tw_tag(id,i, j)   ;end do

      tw1d(1)  =   ts_tag(id, i)
      if( BOUNDB == 1 ) then
          tw1d( BLNU )=tw1d(BLNU-1)
      else
          tw1d(BLNU) = TBLEND - tc
      end if
      call heat_1d_ucm(BLNU, dx, kw, tw1d)

      !- return values
      do j=1, BLNU   ;tw_tag(id,i,j) = tw1d(j)    ;end do

      do j=1, BLNU
          tw(id, i, j) = tw_tag(id,i, j)
      end do

      ts(id,i) =  ts_tag(id, i)
      call check_value ( istep, "ts wall", ts(id,i) )
      !>>>>>>>>>>>>>> CALCULATE FLUX From New TS
      !------
      h(id, i)    =   hc *( ts_tag(id, i) - t(i+1) )       ! W/m2

      x1     =  t(i+1) + tb
      rho    =  p * 100.0d0 / rd / x1               ! equation of state
      hflux(id, i) =  h(id, i)/(cp*rho)

      le(id, i) = h(id, i)/bo                         !- latent heat [W/m2]
      GR(id, i) = gc * ( ts_tag(id, i) - tw_tag(id,i,2) )
   end do   ! end loop directions
end do

!...............................................
!   end loop
!..............................................

!- calculate heat from canyon
do i=1, kce-2
   x1 =  sum(hflux(:,i)) * dz(i+1) *wl              ![Km3/s]
   x2 = x1 / ((rl*rl + 2.0d0 * rl*wl)*dz(i+1))      ![K/s]
   q(i+1) = x2
end do

! Km/s
q(kms+1) = q(kms+1) + ahh/(cp*rho) / dz(kms+1)

x1=1.0d0/dfloat(kce-2)

SWNET_UCM(3:6)   = SUM(SNET,DIM = 2)   / DFLOAT(KCE-2)
LWDOWN_UCM(3:6)  = SUM(LDOWN,DIM = 2)  / DFLOAT(KCE-2)
LWUP_UCM(3:6)    = SUM(LUP,DIM = 2)    / DFLOAT(KCE-2)
LWNET_UCM(3:6)   = LWDOWN_UCM(3:6) - LWUP_UCM(3:6)


return
end subroutine mucm_wall
!================================================================










!============================================
subroutine heat_1d_ucm (nw, dx, kw, tw)
use module_params, only : dt

!  solve heat conduction eq. by 1 dimension
implicit none
integer, intent(in)                    :: nw
real(8), dimension(nw), intent(in)     :: dx
real(8), dimension(nw), intent(inout)  :: tw, kw
!- local vars
real(8),dimension(nw)         :: dxx, a, b, c, d, gg, ss
integer                                :: k


do k = 2, nw-1
   a(k) = - kw(k-1) / ( dx(k) * (dx(k) + dx(k+1) ) * 0.5d0 ) * dt
   c(k) = - kw(k)   / (dx(k+1)* (dx(k) + dx(k+1) ) * 0.5d0 ) * dt
   b(k)   =   1.d0 - a(k)  - c(k)
   d(k)   =   tw(k)
end do

d(2)      =  d(2)     -  a(2)*tw(1)
a(2)      =  0.d0
d(nw-1)   =  d(nw-1)  -  c(nw-1)*tw(nw)
c(nw-1)   =  0.d0

!- solve tri
!- initialize g and s
gg(2) = b(2)
ss(2) = d(2)
!- solve for vectors c-prime and d-prime
do k = 3,nw-1
   gg(k) = b(k) - a(k)*c(k-1)/gg(k-1)
   ss(k) = d(k) - a(k)*ss(k-1)/gg(k-1)
enddo
!- initialize x
   tw(nw-1) = ss(nw-1) / gg(nw-1)
!- solve for x from the vectors c-prime and d-prime
do k = nw-2, 2, -1
   tw(k) = ( ss(k) - c(k) * tw(k+1))/gg(k)
end do
return
end subroutine heat_1d_ucm
!===============================================================







!===============================
  end module module_sf_ucm
!===============================
